package com.meter.thorclient.clients;

import static com.meter.thorclient.clients.base.AbstractClient.Path.PostFilterEventsLogPath;

import java.util.ArrayList;
import java.util.HashMap;

import com.meter.thorclient.clients.base.AbstractClient;
import com.meter.thorclient.core.model.blockchain.EventFilter;
import com.meter.thorclient.core.model.blockchain.EventList;
import com.meter.thorclient.core.model.blockchain.FilteredEvent;
import com.meter.thorclient.core.model.blockchain.FilteredLogEvent;
import com.meter.thorclient.core.model.blockchain.FilteredTransfer;
import com.meter.thorclient.core.model.blockchain.FilteredTransferEvent;
import com.meter.thorclient.core.model.blockchain.LogFilter;
import com.meter.thorclient.core.model.blockchain.Order;
import com.meter.thorclient.core.model.blockchain.TransferEventList;
import com.meter.thorclient.core.model.blockchain.TransferFilter;
import com.meter.thorclient.core.model.blockchain.TransferredFilter;
import com.meter.thorclient.core.model.clients.Address;
import com.meter.thorclient.core.model.exception.ClientArgumentException;
import com.meter.thorclient.core.model.exception.ClientIOException;
import com.meter.thorclient.utils.Prefix;

/**
 * Get log generated by contract with event filter or transfer logs.
 */
public class LogsClient extends AbstractClient {

	/**
	 * Get events log from a address.
	 * 
	 * @param filter
	 *            required {@link EventFilter} a filter for the events log.
	 * @param order
	 *            optional {@link Order} a time order for the events list.
	 * @param address
	 *            optional {@link Address} a address which has events log.
	 * @return array of {@link FilteredEvent}, could be null. throws ClientIOException network error or request invalid.
	 */
	@Deprecated
	public static ArrayList<?> filterEvents(EventFilter filter, Order order, Address address) throws ClientIOException {
		if (filter == null) {
			throw ClientArgumentException.exception("filter is null");
		}
		HashMap<String, String> queryParams = new HashMap<>();
		if (order != null) {
			queryParams.put("order", order.getValue());
		}
		if (address != null) {
			queryParams.put("address", address.toHexString(Prefix.ZeroLowerX));
		}

		return sendPostRequest( PostFilterEventsLogPath, null, queryParams, filter,
				ArrayList.class);

	}

	/**
	 * Get transfer logs by order
	 * 
	 * @param filter
	 *            required {@link TransferFilter} filter.
	 * @param order
	 *            optional {@link Order} the result order.
	 * @return array of {@link FilteredTransfer} could be null.
	 * @throws ClientIOException
	 *             network error
	 */
	@Deprecated
	public static ArrayList<?> filterTransferLogs(TransferFilter filter, Order order) throws ClientIOException {
		if (filter == null) {
			throw ClientArgumentException.exception("filter is null");
		}
		HashMap<String, String> queryParams = new HashMap<>();
		if (order != null) {
			queryParams.put("order", order.getValue());
		}

		return sendPostRequest(Path.PostFilterTransferLogPath, null, queryParams, filter,
				ArrayList.class);

	}

    /**
     * Get filtered log events.
     * @param logFilter {@link LogFilter}
     * @return ArrayList {@link FilteredLogEvent}
     * @throws ClientIOException
     */
    public static ArrayList<FilteredLogEvent> getFilteredLogEvents(LogFilter logFilter) throws ClientIOException {
        if (logFilter == null) {
            throw ClientArgumentException.exception( "logFilter is null" );
        }
        return sendPostRequest( Path.PostFilterEventsLogPath, null, null, logFilter,
        		EventList.class);
    }

    /**
     * Get filtered transferred log events.
     * @param transferredFilter {@link TransferredFilter}
     * @return ArrayList of {@link FilteredTransferEvent}
     * @throws ClientIOException
     */
    public static ArrayList<FilteredTransferEvent> getFilteredTransferLogs(TransferredFilter transferredFilter) throws
            ClientIOException{
        if (transferredFilter == null){
            throw ClientArgumentException.exception( "transferredFilter is null" );
        }
        return sendPostRequest( Path.PostFilterTransferLogPath, null, null, transferredFilter,
        		TransferEventList.class);
    }


}
